{"version":3,"sources":["components/comic/Comic.module.css","components/paging/Paging.module.css","components/comics/Comics.module.css","components/thumbnail/Thumbnail.module.css","components/thumbnails/Thumbnails.module.css","components/comic/Comic.tsx","services/utils.ts","core/ComicClass.ts","services/comicsService.ts","components/comics/Comics.tsx","components/paging/Paging.tsx","components/thumbnail/Thumbnail.tsx","components/thumbnails/Thumbnails.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Comic","comic","className","s","root","header","index","date","title","alt","src","imageUrl","fetchUrl","url","a","fetch","response","json","ComicClass","data","this","num","img","day","month","year","fetchComic","fetchComicLatest","comicDefault","Comics","useState","maxComicIndex","setMaxComicIndex","comicIndex","setComicIndex","pageIndex","setPageIndex","comics","setComics","useEffect","comicLatest","array","i","push","fetchData","length","find","maxPageIndex","Math","floor","onThumbnailClick","Paging","isFirstPage","isLastPage","button","isActive","text","type","onClick","currentPageNumber","Thumbnail","Thumbnails","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84dd72af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Comic_root__344oi\",\"header\":\"Comic_header__1LupG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Paging_root__2tuAP\",\"currentPageNumber\":\"Paging_currentPageNumber__3Gr70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Comics_root__2CEtg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Thumbnail_root__17uiK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Thumbnails_root__alEr2\"};","import React from \"react\";\nimport { ComicClass } from \"core/ComicClass\";\n\nimport s from \"./Comic.module.css\";\n\ntype Props = {\n  comic: ComicClass;\n};\n\n// ----------\n// COMPONENT:\nconst Comic = ({ comic }: Props) => {\n  return (\n    <div className={s.root}>\n      <div className={s.header}>\n        <div>\n          <i>\n            #{comic.index + 1} ({comic.date})\n          </i>\n        </div>\n        <div>\n          <b>{comic.title}</b>\n        </div>\n      </div>\n\n      <img alt={comic.alt} src={comic.imageUrl} />\n    </div>\n  );\n};\n\nexport default Comic;\n","export const fetchUrl = async (url: string) => {\r\n  const response = await fetch(url);\r\n  return await response.json();\r\n};\r\n","/*\r\nEXAMPLE:\r\n  \"num\": 2397,\r\n  \"year\": \"2020\",\r\n  \"month\": \"12\",\r\n  \"day\": \"11\"\r\n  \"link\": \"\",\r\n  \"news\": \"\",\r\n  \"title\": \"I Just Don't Trust Them\",\r\n  \"safe_title\": \"I Just Don't Trust Them\",\r\n  \"transcript\": \"\",\r\n  \"alt\": \"I believe in getting immunity the old-fashioned way: By letting a bat virus take control of my lungs and turn my face into a disgusting plague fountain while my immune system desperately Googles 'how to make spike protein antibodies'.\",\r\n  \"img\": \"https://imgs.xkcd.com/comics/i_just_dont_trust_them.png\",\r\n*/\r\n\r\nexport class ComicClass {\r\n  index: number; // 0 based\r\n  title: string;\r\n  imageUrl: string;\r\n  date: string;\r\n  alt: string;\r\n\r\n  constructor(data: any) {\r\n    this.index = data.num - 1; // num: 1 based\r\n    this.title = data.title;\r\n    this.imageUrl = data.img;\r\n    this.date = `${data.day}-${data.month}-${data.year}`;\r\n    this.alt = data.alt;\r\n  }\r\n}\r\n","import { fetchUrl } from \"./utils\";\r\nimport { ComicClass } from \"core/ComicClass\";\r\n\r\n// const getComicUrl = (num: number) => `http://xkcd.com/${num}/info.0.json`;\r\nconst getComicUrl = (num: number) => `https://xkcd.now.sh/?comic=` + num;\r\nconst getComicUrlLatest = () => `https://xkcd.now.sh/?comic=latest`;\r\n\r\nexport const fetchComic = async (index: number): Promise<ComicClass> =>\r\n  new ComicClass(await fetchUrl(getComicUrl(index + 1)));\r\n\r\nexport const fetchComicLatest = async (): Promise<ComicClass> =>\r\n  new ComicClass(await fetchUrl(getComicUrlLatest()));\r\n","import React, { useEffect, useState } from \"react\";\nimport { ComicClass } from \"core/ComicClass\";\nimport { fetchComic, fetchComicLatest } from \"services/comicsService\";\nimport { Comic, Paging, Thumbnails } from \"components\";\n\nimport s from \"./Comics.module.css\";\n\nconst pageSize = 5;\nconst comicDefault: ComicClass[] = [];\n\nconst getPageIndex = (index: number) => Math.floor(index / pageSize);\n\n// ----------\n// COMPONENT:\nconst Comics = () => {\n  // STATE:\n  const [maxComicIndex, setMaxComicIndex] = useState(0);\n  const [comicIndex, setComicIndex] = useState(0);\n  const [pageIndex, setPageIndex] = useState(0);\n  const [comics, setComics] = useState(comicDefault);\n\n  // USE EFFECT - GET DATA:\n  useEffect(() => {\n    const fetchData = async () => {\n      // Max index: fetch only once\n      if (maxComicIndex === 0) {\n        const comicLatest = await fetchComicLatest();\n        setMaxComicIndex(comicLatest.index);\n      }\n\n      // Fetch a page of thumbnails\n      const array: ComicClass[] = [];\n      for (var i = 0; i < pageSize; i++) {\n        const index = pageIndex * pageSize + i;\n\n        if (index > maxComicIndex) break;\n\n        const comic = await fetchComic(index);\n        array.push(comic);\n      }\n\n      setComics(array);\n      setComicIndex(pageIndex * pageSize);\n    };\n\n    fetchData();\n  }, [maxComicIndex, pageIndex]);\n\n  // FUNCTIONS:\n  const onThumbnailClick = (index: number) => {\n    setComicIndex(index);\n  };\n  const onSetPageIndex = (pageIndex: number) => {\n    setPageIndex(pageIndex);\n  };\n\n  if (comics.length < 1) return <div>Loading...</div>;\n\n  const comic = comics.find(comic => comic.index === comicIndex);\n\n  // RENDER:\n  return (\n    <div className={s.root}>\n      <Paging\n        pageIndex={pageIndex}\n        maxPageIndex={getPageIndex(maxComicIndex)}\n        setPageIndex={onSetPageIndex}\n      />\n\n      <div className=\"flexRow\">\n        <Thumbnails comics={comics} onThumbnailClick={onThumbnailClick} />\n\n        {comic && <Comic comic={comic} />}\n      </div>\n    </div>\n  );\n};\n\nexport default Comics;\n","import React from \"react\";\nimport s from \"./Paging.module.css\";\n\ntype Props = {\n  pageIndex: number;\n  maxPageIndex: number;\n  setPageIndex: (event: any) => void;\n};\n\n// ----------\n// COMPONENT:\nconst Paging = ({ pageIndex, maxPageIndex, setPageIndex }: Props) => {\n  const isFirstPage = pageIndex === 0;\n  const isLastPage = pageIndex === maxPageIndex;\n\n  // FUNCTIONS:\n  const button = (isActive: boolean, text: string, pageIndex: number) => (\n    <button\n      type=\"button\"\n      className={isActive ? \"\" : \"inactive\"}\n      onClick={() => setPageIndex(pageIndex)}\n    >\n      {text}\n    </button>\n  );\n\n  return (\n    <div className={s.root}>\n      {button(!isFirstPage, \"1\", 0)}\n      {button(!isFirstPage, \"<\", isFirstPage ? 0 : pageIndex - 1)}\n\n      <span className={s.currentPageNumber}> PAGE: {pageIndex + 1}</span>\n\n      {button(!isLastPage, \">\", isLastPage ? maxPageIndex : pageIndex + 1)}\n      {button(!isLastPage, `${maxPageIndex + 1}`, maxPageIndex)}\n    </div>\n  );\n};\n\nexport default Paging;\n","import React from \"react\";\nimport { ComicClass } from \"core/ComicClass\";\nimport s from \"./Thumbnail.module.css\";\n\ntype Props = {\n  comic: ComicClass;\n  onClick: (event: any) => void;\n};\n\n// ----------\n// COMPONENT:\nconst Thumbnail = ({ comic, onClick }: Props) => {\n  return (\n    <div className={s.root}>\n      <button type=\"button\">\n        <img alt=\"\" src={comic.imageUrl} onClick={onClick} />\n      </button>\n    </div>\n  );\n};\n\nexport default Thumbnail;\n","import React from \"react\";\nimport { ComicClass } from \"core/ComicClass\";\nimport { Thumbnail } from \"components\";\n\nimport s from \"./Thumbnails.module.css\";\n\ntype Props = {\n  comics: ComicClass[];\n  onThumbnailClick: (index: number) => void;\n};\n\n// ----------\n// COMPONENT:\nconst Thumbnails = ({ comics, onThumbnailClick }: Props) => {\n  return (\n    <div className={s.root}>\n      {comics.map(comic => (\n        <Thumbnail\n          key={comic.index}\n          comic={comic}\n          onClick={() => onThumbnailClick(comic.index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Thumbnails;\n","import React from \"react\";\nimport { Comics } from \"components\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"App-header\">\n        <h1>XKCD COMICS</h1>\n      </header>\n\n      <Comics />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}